#  } else { NA }
#}))
# assign features
for (f in features){
if( f %in% names(geno(all_calls))){ # start with genotype because a variable can have same name in both geno and info (prioritize geno)
all_mut_table[,f] = as.vector(t(geno(all_calls)[[f]]))[kept_variants] # do this in each if, in order to do not keep na values for features not found
} else { # only do this if not found in geno, otherwise vector will be replace by the info one
if(f %in% colnames(info(all_calls))){
all_mut_table[,f] = rep(info(all_calls)[,f], each = n_samples)[kept_variants] # to get same structure than as.vector(t(geno))
} else {
all_mut_table[,f] = rep(as.data.frame(rowRanges(all_calls)[,f])[,f], each = n_samples)[kept_variants]
}
}
}
if( ! ethnicity ){
normal_calls = all_calls[,which(grepl("BN-", colnames(all_calls)))]
nbq = apply(geno(normal_calls)[["QVAL"]], 1, function(r) length(which(r>=minQVAL)))
all_nbq = rep(nbq, each = n_samples)[kept_variants]
# assign status
all_mut_table$status = NA # status as NA is for variants not used in the training
all_mut_table[which(all_nbq>=2),"status"] = "TP" # if found in at least 2 normal cells
all_mut_table[which(all_nbq==1),"status"] = "FP" # if found in only 1 normal cell
}
if( ethnicity ){
# assign status
all_mut_table$status = NA # status as NA is for variants not used in the training
all_mut_table[which(sm_ethn>=0.99),"status"] = "TP" # here add & exac_all>=0.001 if want to filter rare variants
all_mut_table[which(other_ethn >=0.99),"status"] = "FP" # here too
}
# correct rvsb feature
if("RVSB" %in% features) all_mut_table[which(all_mut_table$RVSB <0.5),"RVSB"]=0.5
# return the table used for training
train_table_chunk = all_mut_table[which(!is.na(all_mut_table$status)),]
if(! exists("train_table")) {train_table=train_table_chunk} else {train_table = rbind(train_table, train_table_chunk)}
par(mfrow=c(2,2))
for(f in features) {
hist(train_table[which(train_table$status=="TP"),f], main=f, xlab=f, col=adjustcolor("darkgreen",0.7))
hist(train_table[which(train_table$status=="FP"),f],main=f, xlab=f, col=adjustcolor("red",0.7))
}
folds <- createFolds(train_table$status, 10)
all_pred_rf = c()
all_status_rf = c()
for(i in 1:10){
#print(paste("fold: ",i,sep=""))
test = train_table[folds[[i]],]
train = train_table[-folds[[i]],]
train$old_status=train$status; test$old_status=test$status
train$status = 0 ; train[which(train$old_status=="TP"),"status"] = 1
test$status = 0 ; test[which(test$old_status=="TP"),"status"] = 1
rf_fold = randomForest(as.factor(status) ~ ., data = train[,c(features,"status")], importance = TRUE,
ntree = 500, sampsize = as.numeric(table(train$status)["1"]), probs=T)
prediction = predict(rf_fold, test, type="prob")[,2]
all_pred_rf = c(all_pred_rf, prediction)
all_status_rf = c(all_status_rf, test$status)
}
perf = performance( prediction( all_pred_rf, all_status_rf ), "rec" ,"spec") #sens in y and tdr in x
plot(perf, colorize=T, lwd=3, xlab="specificity", ylab="sensitivity", xaxt='n')
auc = performance( prediction( all_pred_rf, all_status_rf ), "auc" )@y.values[[1]]
text(0.98, 1, paste("auc=",round(auc,3)))
auc
# apply the random forest model
all_mut_table$FPprob = predict(rf, all_mut_table, type="prob")[,2]
head(all_mut_table$FPprob)
hist(all_mut_table$FPprob)
hist(log10(all_mut_table$FPprob))
plot(log10(all_mut_table$FPprob), all_mut_table$status)
all_mut_table$st = 0
all_mut_table$st = NA
all_mut_table[which(all_mut_table$status=="TP"),"st"] = 1
all_mut_table[which(all_mut_table$status=="FP"),"st"] = 0
plot(log10(all_mut_table$FPprob), all_mut_table$status)
plot(log10(all_mut_table$FPprob), all_mut_table$st)
table(all_mut_table[which(all_mut_table$FPprob < 0.01),"status"])
table(all_mut_table[which(all_mut_table$FPprob > 0.01),"status"])
table(all_mut_table[which(all_mut_table$FPprob > 0.1),"status"])
table(all_mut_table[which(all_mut_table$FPprob < 0.1),"status"])
600/3600
500/10000
prediction = predict(rf_fold, test, type="prob")[,2]
head(pred)
head(prediction)
prediction = predict(rf_fold, test, type="prob")
head(prediction)
# compute a ROC curve from k-fold cross validation
folds <- createFolds(train_table$status, 10)
all_pred_rf = c()
all_status_rf = c()
for(i in 1:10){
#print(paste("fold: ",i,sep=""))
test = train_table[folds[[i]],]
train = train_table[-folds[[i]],]
train$old_status=train$status; test$old_status=test$status
train$status = 0 ; train[which(train$old_status=="TP"),"status"] = 1
test$status = 0 ; test[which(test$old_status=="TP"),"status"] = 1
rf_fold = randomForest(as.factor(status) ~ ., data = train[,c(features,"status")], importance = TRUE,
ntree = 500, sampsize = as.numeric(table(train$status)["1"]), probs=T)
prediction = predict(rf_fold, test, type="prob")[,1]
all_pred_rf = c(all_pred_rf, prediction)
all_status_rf = c(all_status_rf, test$status)
}
perf = performance( prediction( all_pred_rf, all_status_rf ), "rec" ,"spec") #sens in y and tdr in x
plot(perf, colorize=T, lwd=3, xlab="specificity", ylab="sensitivity", xaxt='n')
auc = performance( prediction( all_pred_rf, all_status_rf ), "auc" )@y.values[[1]]
auc
folds <- createFolds(train_table$status, 10)
all_pred_rf = c()
all_status_rf = c()
for(i in 1:10){
#print(paste("fold: ",i,sep=""))
test = train_table[folds[[i]],]
train = train_table[-folds[[i]],]
train$old_status=train$status; test$old_status=test$status
train$status = 0 ; train[which(train$old_status=="TP"),"status"] = 1
test$status = 0 ; test[which(test$old_status=="TP"),"status"] = 1
rf_fold = randomForest(as.factor(status) ~ ., data = train[,c(features,"status")], importance = TRUE,
ntree = 500, sampsize = as.numeric(table(train$status)["1"]), probs=T)
prediction = predict(rf_fold, test, type="prob")[,2]
all_pred_rf = c(all_pred_rf, prediction)
all_status_rf = c(all_status_rf, test$status)
}
perf = performance( prediction( all_pred_rf, all_status_rf ), "rec" ,"spec") #sens in y and tdr in x
plot(perf, colorize=T, lwd=3, xlab="specificity", ylab="sensitivity", xaxt='n')
auc = performance( prediction( all_pred_rf, all_status_rf ), "auc" )@y.values[[1]]
# compute a ROC curve from k-fold cross validation
folds <- createFolds(train_table$status, 10)
all_pred_rf = c()
all_status_rf = c()
for(i in 1:10){
#print(paste("fold: ",i,sep=""))
test = train_table[folds[[i]],]
train = train_table[-folds[[i]],]
train$old_status=train$status; test$old_status=test$status
train$status = 0 ; train[which(train$old_status=="TP"),"status"] = 1
test$status = 0 ; test[which(test$old_status=="TP"),"status"] = 1
rf_fold = randomForest(as.factor(status) ~ ., data = train[,c(features,"status")], importance = TRUE,
ntree = 500, sampsize = as.numeric(table(train$status)["1"]), probs=T)
prediction = 1 - predict(rf_fold, test, type="prob")[,2]
all_pred_rf = c(all_pred_rf, prediction)
all_status_rf = c(all_status_rf, test$status)
}
perf = performance( prediction( all_pred_rf, all_status_rf ), "rec" ,"spec") #sens in y and tdr in x
plot(perf, colorize=T, lwd=3, xlab="specificity", ylab="sensitivity", xaxt='n')
folds <- createFolds(train_table$status, 10)
all_pred_rf = c()
all_status_rf = c()
for(i in 1:10){
#print(paste("fold: ",i,sep=""))
test = train_table[folds[[i]],]
train = train_table[-folds[[i]],]
train$old_status=train$status; test$old_status=test$status
train$status = 0 ; train[which(train$old_status=="TP"),"status"] = 1
test$status = 0 ; test[which(test$old_status=="TP"),"status"] = 1
rf_fold = randomForest(as.factor(status) ~ ., data = train[,c(features,"status")], importance = TRUE,
ntree = 500, sampsize = as.numeric(table(train$status)["1"]), probs=T)
prediction = predict(rf_fold, test, type="prob")[,2]
all_pred_rf = c(all_pred_rf, prediction)
all_status_rf = c(all_status_rf, test$status)
}
perf = performance( prediction( all_pred_rf, all_status_rf ), "rec" ,"spec") #sens in y and tdr in x
plot(perf, colorize=T, lwd=3, xlab="specificity", ylab="sensitivity", xaxt='n')
perf = performance( prediction( all_pred_rf, all_status_rf ), "rec" ,"ppv") #sens in y and tdr in x
plot(perf, colorize=T, lwd=3, xlab="specificity", ylab="sensitivity", xaxt='n')
head(all_pred_rf)
head(all_status_rf)
table(train$status)
features
plot(perf, colorize=T, lwd=3, xlab="specificity", ylab="sensitivity", xaxt='n', xlim=c(0,1))
plot(perf, colorize=T, lwd=3, xlab="specificity", ylab="sensitivity", xaxt='n', xlim=c(1,0))
args = list()
args = list()
args$vcf="/g/strcombio/fsupek_cancer1/single_cell/Li_Wang_2012/calling/needlestack/results_whole_genome/whole_genome.hg18_multianno.vcf.bgz"
args$rlm_folder="/g/strcombio/fsupek_cancer1/single_cell/Li_Wang_2012/calling/needlestack/results_whole_genome/needlestack-ITC_result/ITC/"
args$clone_table="~/Documents/Models/SingleCell/Li_wang_2012/clones.xlsx"
if(is.null(args$vcf)) {stop("Option --vcf should be provided")} else{vcf=args$vcf}
if(is.null(args$rlm_folder)) {stop("Option --rlm_folder should be provided")} else{rlm_folder=args$rlm_folder}
if(is.null(args$clone_table)) {stop("Option --clone_table should be provided")} else{clone_table=args$clone_table}
if(is.null(args$work_folder)) {work_folder=rlm_folder} else{work_folder=args$work_folder}
if(is.null(args$genome)) {genome="hg18"} else {genome=args$genome}
if(is.null(args$minQVAL)) {minQVAL=20} else {minQVAL=as.numeric(args$minQVAL)}
if(is.null(args$germline_mutations)) {germline_mutations=NULL} else {germline_mutations=as.character(read.table(args$germline_mutations,h=F)[,1])}
suppressMessages(library(VariantAnnotation))
suppressMessages(library(xlsx))
suppressMessages(library(MutationalPatterns))
suppressMessages(library(BSgenome))
suppressMessages(library(RCurl))
suppressMessages(library(ggplot2))
eval(parse(text = getURL("https://raw.githubusercontent.com/UMCUGenetics/MutationalPatterns/master/R/MutationalPatterns.R", ssl.verifypeer = FALSE)))
# set the genome
ref_genome = available.genomes()[which(grepl(genome,available.genomes()) & ! grepl("masked",available.genomes()))]
if (! is.element(ref_genome, installed.packages()[,1])) BiocManager::install(ref_genome)
library(ref_genome, character.only = TRUE)
calls = readVcf( open(VcfFile(vcf,  yieldSize=2500000)), genome)
calls = calls[which(qual(calls) >= minQVAL),]
clones = read.xlsx(clone_table, h=T, sheetIndex = 1)
# remove germline mutations if in input
if(!is.null(germline_mutations)) calls = calls[which(! rownames(calls) %in% germline_mutations),]
# compute mutational context
nut3_context = type_context(rowRanges(calls), ref_genome)
all_samples = as.character(clones[which(clones$Cluster %in% c("A","B","C")),"Sample"]) # analyse only tumor cells
pdf("/g/strcombio/fsupek_cancer1/single_cell/Li_Wang_2012/calling/needlestack/analysis/spectrum.pdf", 10, 6)
for(sm in all_samples){
print(paste("Processing sample: ",sm,sep=""))
clonal_sm = as.character(clones[which(clones$Cluster == as.character(clones[which(clones$Sample == sm), "Cluster"])), "Sample"])
istruemut = rep("FALSE", nrow(calls))
sm_qval = geno(calls, "QVAL")[, paste(sm, "_all_chr", sep="")]
sm_ao = geno(calls, "AO")[, paste(sm, "_all_chr", sep="")]
sm_dp = geno(calls, "DP")[, paste(sm, "_all_chr", sep="")]
clonal_qval = apply(geno(calls, "QVAL"), 1, function(r){
max(r[paste(clonal_sm[which(clonal_sm != sm)], "_all_chr", sep="")])
})
normal_qval = apply(geno(calls, "QVAL"), 1, function(r){
max(r[paste(clones[which(grepl("BN-", clones$Sample)),"Sample"], "_all_chr", sep="")])
})
istruemut[which(sm_ao >=2 & sm_dp >=10 & sm_qval>=minQVAL & clonal_qval>=minQVAL)] = "TRUE"
nut3_context_true =  lapply(nut3_context, function(l) l[which(istruemut == "TRUE")])
all_mut_true = paste(substr(nut3_context_true$context,1,1), "[", nut3_context_true$types, "]", substr(nut3_context_true$context,3,3), sep = "")
mut_mat_true = as.matrix(sapply(TRIPLETS_96, function(t) {length(which(all_mut_true == t))}))
mut_mat_true = cbind(mut_mat_true, unlist(get(load(system(paste("ls ", rlm_folder, "/*", sm, "*.Rdata", sep=""), intern=T)))[rownames(mut_mat_true)]))
colnames(mut_mat_true) = c("GOLD", "ITC")
print(plot_96_profile(mut_mat_true) + ggtitle(sm))
rm(list=ls(pattern = "*rlm_ITC*"))
}
garbage <- dev.off()
if(is.null(args$vcf)) {stop("Option --vcf should be provided")} else{vcf=args$vcf}
if(is.null(args$rlm_folder)) {stop("Option --rlm_folder should be provided")} else{rlm_folder=args$rlm_folder}
if(is.null(args$clone_table)) {stop("Option --clone_table should be provided")} else{clone_table=args$clone_table}
if(is.null(args$work_folder)) {work_folder=rlm_folder} else{work_folder=args$work_folder}
if(is.null(args$genome)) {genome="hg18"} else {genome=args$genome}
if(is.null(args$minQVAL)) {minQVAL=50} else {minQVAL=as.numeric(args$minQVAL)}
if(is.null(args$germline_mutations)) {germline_mutations=NULL} else {germline_mutations=as.character(read.table(args$germline_mutations,h=F)[,1])}
suppressMessages(library(VariantAnnotation))
suppressMessages(library(xlsx))
suppressMessages(library(MutationalPatterns))
suppressMessages(library(BSgenome))
suppressMessages(library(RCurl))
suppressMessages(library(ggplot2))
eval(parse(text = getURL("https://raw.githubusercontent.com/UMCUGenetics/MutationalPatterns/master/R/MutationalPatterns.R", ssl.verifypeer = FALSE)))
# set the genome
ref_genome = available.genomes()[which(grepl(genome,available.genomes()) & ! grepl("masked",available.genomes()))]
if (! is.element(ref_genome, installed.packages()[,1])) BiocManager::install(ref_genome)
library(ref_genome, character.only = TRUE)
calls = readVcf( open(VcfFile(vcf,  yieldSize=2500000)), genome)
calls = calls[which(qual(calls) >= minQVAL),]
clones = read.xlsx(clone_table, h=T, sheetIndex = 1)
# remove germline mutations if in input
if(!is.null(germline_mutations)) calls = calls[which(! rownames(calls) %in% germline_mutations),]
# compute mutational context
nut3_context = type_context(rowRanges(calls), ref_genome)
all_samples = as.character(clones[which(clones$Cluster %in% c("A","B","C")),"Sample"]) # analyse only tumor cells
pdf("/g/strcombio/fsupek_cancer1/single_cell/Li_Wang_2012/calling/needlestack/analysis/spectrum.pdf", 10, 6)
for(sm in all_samples){
print(paste("Processing sample: ",sm,sep=""))
clonal_sm = as.character(clones[which(clones$Cluster == as.character(clones[which(clones$Sample == sm), "Cluster"])), "Sample"])
istruemut = rep("FALSE", nrow(calls))
sm_qval = geno(calls, "QVAL")[, paste(sm, "_all_chr", sep="")]
sm_ao = geno(calls, "AO")[, paste(sm, "_all_chr", sep="")]
sm_dp = geno(calls, "DP")[, paste(sm, "_all_chr", sep="")]
clonal_qval = apply(geno(calls, "QVAL"), 1, function(r){
max(r[paste(clonal_sm[which(clonal_sm != sm)], "_all_chr", sep="")])
})
normal_qval = apply(geno(calls, "QVAL"), 1, function(r){
max(r[paste(clones[which(grepl("BN-", clones$Sample)),"Sample"], "_all_chr", sep="")])
})
istruemut[which(sm_ao >=2 & sm_dp >=10 & sm_qval>=minQVAL & clonal_qval>=minQVAL)] = "TRUE"
nut3_context_true =  lapply(nut3_context, function(l) l[which(istruemut == "TRUE")])
all_mut_true = paste(substr(nut3_context_true$context,1,1), "[", nut3_context_true$types, "]", substr(nut3_context_true$context,3,3), sep = "")
mut_mat_true = as.matrix(sapply(TRIPLETS_96, function(t) {length(which(all_mut_true == t))}))
mut_mat_true = cbind(mut_mat_true, unlist(get(load(system(paste("ls ", rlm_folder, "/*", sm, "*.Rdata", sep=""), intern=T)))[rownames(mut_mat_true)]))
colnames(mut_mat_true) = c("GOLD", "ITC")
print(plot_96_profile(mut_mat_true) + ggtitle(sm))
rm(list=ls(pattern = "*rlm_ITC*"))
}
garbage <- dev.off()
rm(list=ls())
args = list()
args$vcf="/g/strcombio/fsupek_cancer1/single_cell/Li_Wang_2012/calling/needlestack/results_whole_genome/whole_genome.hg18_multianno.vcf.bgz"
args$rlm_folder="/g/strcombio/fsupek_cancer1/single_cell/Li_Wang_2012/calling/needlestack/results_whole_genome/needlestack-ITC_result/ITC/"
args$clone_table="~/Documents/Models/SingleCell/Li_wang_2012/clones.xlsx"
if(is.null(args$vcf)) {stop("Option --vcf should be provided")} else{vcf=args$vcf}
if(is.null(args$rlm_folder)) {stop("Option --rlm_folder should be provided")} else{rlm_folder=args$rlm_folder}
if(is.null(args$clone_table)) {stop("Option --clone_table should be provided")} else{clone_table=args$clone_table}
if(is.null(args$work_folder)) {work_folder=rlm_folder} else{work_folder=args$work_folder}
if(is.null(args$genome)) {genome="hg18"} else {genome=args$genome}
if(is.null(args$minQVAL)) {minQVAL=50} else {minQVAL=as.numeric(args$minQVAL)}
if(is.null(args$germline_mutations)) {germline_mutations=NULL} else {germline_mutations=as.character(read.table(args$germline_mutations,h=F)[,1])}
suppressMessages(library(VariantAnnotation))
suppressMessages(library(xlsx))
suppressMessages(library(MutationalPatterns))
suppressMessages(library(BSgenome))
suppressMessages(library(RCurl))
suppressMessages(library(ggplot2))
eval(parse(text = getURL("https://raw.githubusercontent.com/UMCUGenetics/MutationalPatterns/master/R/MutationalPatterns.R", ssl.verifypeer = FALSE)))
# set the genome
ref_genome = available.genomes()[which(grepl(genome,available.genomes()) & ! grepl("masked",available.genomes()))]
if (! is.element(ref_genome, installed.packages()[,1])) BiocManager::install(ref_genome)
library(ref_genome, character.only = TRUE)
calls = readVcf( open(VcfFile(vcf,  yieldSize=2500000)), genome)
calls = calls[which(qual(calls) >= minQVAL),]
clones = read.xlsx(clone_table, h=T, sheetIndex = 1)
# remove germline mutations if in input
if(!is.null(germline_mutations)) calls = calls[which(! rownames(calls) %in% germline_mutations),]
# compute mutational context
nut3_context = type_context(rowRanges(calls), ref_genome)
all_samples = as.character(clones[which(clones$Cluster %in% c("A","B","C")),"Sample"]) # analyse only tumor cells
pdf("/g/strcombio/fsupek_cancer1/single_cell/Li_Wang_2012/calling/needlestack/analysis/spectrum.pdf", 10, 6)
for(sm in all_samples){
print(paste("Processing sample: ",sm,sep=""))
clonal_sm = as.character(clones[which(clones$Cluster == as.character(clones[which(clones$Sample == sm), "Cluster"])), "Sample"])
istruemut = rep("FALSE", nrow(calls))
sm_qval = geno(calls, "QVAL")[, paste(sm, "_all_chr", sep="")]
sm_ao = geno(calls, "AO")[, paste(sm, "_all_chr", sep="")]
sm_dp = geno(calls, "DP")[, paste(sm, "_all_chr", sep="")]
clonal_qval = apply(geno(calls, "QVAL"), 1, function(r){
length(which(r[paste(clonal_sm[which(clonal_sm != sm)], "_all_chr", sep="")] >= minQVAL)) # of cells in the same clone having a sufficient QVAL
})
istruemut[which(sm_ao >=2 & sm_dp >=10 & sm_qval>=minQVAL & clonal_qval>=3)] = "TRUE"
nut3_context_true =  lapply(nut3_context, function(l) l[which(istruemut == "TRUE")])
all_mut_true = paste(substr(nut3_context_true$context,1,1), "[", nut3_context_true$types, "]", substr(nut3_context_true$context,3,3), sep = "")
mut_mat_true = as.matrix(sapply(TRIPLETS_96, function(t) {length(which(all_mut_true == t))}))
mut_mat_true = cbind(mut_mat_true, unlist(get(load(system(paste("ls ", rlm_folder, "/*", sm, "*.Rdata", sep=""), intern=T)))[rownames(mut_mat_true)]))
colnames(mut_mat_true) = c("GOLD", "ITC")
print(plot_96_profile(mut_mat_true) + ggtitle(sm))
rm(list=ls(pattern = "*rlm_ITC*"))
}
garbage <- dev.off()
minQVAL
rm(list=ls())
args = list()
args$vcf="/g/strcombio/fsupek_cancer1/single_cell/Li_Wang_2012/calling/needlestack/results_whole_genome/whole_genome.hg18_multianno.vcf.bgz"
args$rlm_folder="/g/strcombio/fsupek_cancer1/single_cell/Li_Wang_2012/calling/needlestack/results_whole_genome/needlestack-ITC_result/ITC/"
args$clone_table="~/Documents/Models/SingleCell/Li_wang_2012/clones.xlsx"
if(is.null(args$vcf)) {stop("Option --vcf should be provided")} else{vcf=args$vcf}
if(is.null(args$rlm_folder)) {stop("Option --rlm_folder should be provided")} else{rlm_folder=args$rlm_folder}
if(is.null(args$clone_table)) {stop("Option --clone_table should be provided")} else{clone_table=args$clone_table}
if(is.null(args$work_folder)) {work_folder=rlm_folder} else{work_folder=args$work_folder}
if(is.null(args$genome)) {genome="hg18"} else {genome=args$genome}
if(is.null(args$minQVAL)) {minQVAL=20} else {minQVAL=as.numeric(args$minQVAL)}
if(is.null(args$germline_mutations)) {germline_mutations=NULL} else {germline_mutations=as.character(read.table(args$germline_mutations,h=F)[,1])}
suppressMessages(library(VariantAnnotation))
suppressMessages(library(xlsx))
suppressMessages(library(MutationalPatterns))
suppressMessages(library(BSgenome))
suppressMessages(library(RCurl))
suppressMessages(library(ggplot2))
eval(parse(text = getURL("https://raw.githubusercontent.com/UMCUGenetics/MutationalPatterns/master/R/MutationalPatterns.R", ssl.verifypeer = FALSE)))
# set the genome
ref_genome = available.genomes()[which(grepl(genome,available.genomes()) & ! grepl("masked",available.genomes()))]
if (! is.element(ref_genome, installed.packages()[,1])) BiocManager::install(ref_genome)
library(ref_genome, character.only = TRUE)
calls = readVcf( open(VcfFile(vcf,  yieldSize=2500000)), genome)
calls = calls[which(qual(calls) >= minQVAL),]
clones = read.xlsx(clone_table, h=T, sheetIndex = 1)
# remove germline mutations if in input
if(!is.null(germline_mutations)) calls = calls[which(! rownames(calls) %in% germline_mutations),]
# compute mutational context
nut3_context = type_context(rowRanges(calls), ref_genome)
all_samples = as.character(clones[which(clones$Cluster %in% c("A","B","C")),"Sample"]) # analyse only tumor cells
pdf("/g/strcombio/fsupek_cancer1/single_cell/Li_Wang_2012/calling/needlestack/analysis/spectrum.pdf", 10, 6)
for(sm in all_samples){
print(paste("Processing sample: ",sm,sep=""))
clonal_sm = as.character(clones[which(clones$Cluster == as.character(clones[which(clones$Sample == sm), "Cluster"])), "Sample"])
istruemut = rep("FALSE", nrow(calls))
sm_qval = geno(calls, "QVAL")[, paste(sm, "_all_chr", sep="")]
sm_ao = geno(calls, "AO")[, paste(sm, "_all_chr", sep="")]
sm_dp = geno(calls, "DP")[, paste(sm, "_all_chr", sep="")]
clonal_qval = apply(geno(calls, "QVAL"), 1, function(r){
length(which(r[paste(clonal_sm[which(clonal_sm != sm)], "_all_chr", sep="")] >= minQVAL)) # of cells in the same clone having a sufficient QVAL
})
istruemut[which(sm_ao >=2 & sm_dp >=10 & sm_qval>=minQVAL & clonal_qval>=3)] = "TRUE"
nut3_context_true =  lapply(nut3_context, function(l) l[which(istruemut == "TRUE")])
all_mut_true = paste(substr(nut3_context_true$context,1,1), "[", nut3_context_true$types, "]", substr(nut3_context_true$context,3,3), sep = "")
mut_mat_true = as.matrix(sapply(TRIPLETS_96, function(t) {length(which(all_mut_true == t))}))
mut_mat_true = cbind(mut_mat_true, unlist(get(load(system(paste("ls ", rlm_folder, "/*", sm, "*.Rdata", sep=""), intern=T)))[rownames(mut_mat_true)]))
colnames(mut_mat_true) = c("GOLD", "ITC")
print(plot_96_profile(mut_mat_true) + ggtitle(sm))
rm(list=ls(pattern = "*rlm_ITC*"))
}
garbage <- dev.off()
getwd()
rf
load("/g/strcombio/fsupek_cancer1/single_cell/Li_Wang_2012/calling/needlestack/results_whole_genome/needlestack-ITC_result/RDATA/RF_needlestack.Rdata")
rf
install.packages("party")
library(party)
party::ctree()
library(reprtree)
install.packages("reprtree")
version
install.packages("reprtre")
devtools
install.packages("devtools")
library(devtools)
devtools::install_github('araastat/reprtree')
library(reprtree)
plot.getTree
reprtree::ReprTree(rf)
rm(list=ls())
args = list9
args = list(args)
args = list()
args$vcf = "/g/strcombio/fsupek_cancer1/single_cell/Li_Wang_2012/calling/needlestack/results_whole_genome/whole_genome.hg18_multianno.vcf.bgz"
if(is.null(args$vcf)) {stop("Option --vcf should be provided")} else{vcf=args$vcf}
if(is.null(args$genome)) {genome="hg18"} else {genome=args$genome}
if(is.null(args$output_folder)) { output_folder="."} else {output_folder = args$output_folder}
out_vcf = paste(output_folder, "/", paste( sub(".vcf.gz", "", sub('.vcf.bgz', '', basename(vcf))), "RF_needlestack.vcf", sep="_"), sep="")
if(is.null(args$minQVAL)) {minQVAL=20} else {minQVAL=args$minQVAL}
if(is.null(args$features)) {features=c("QVAL","AO","AF","DP","ERR","QUAL","RVSB","FS")} else {features=as.character(unlist(strsplit(args$features,",")))}
if(is.null(args$ethnicity)) {ethnicity = FALSE} else {ethnicity = TRUE}
suppressMessages(library(VariantAnnotation))
suppressMessages(library(randomForest))
suppressMessages(library(caret))
suppressMessages(library(ROCR))
suppressMessages(library(parallel))
vcf = open(VcfFile(vcf, yieldSize=500000))
all_calls = readVcf(vcf, genome)
while(dim(all_calls)[1] != 0) {
print("new chunk")
# in case minQVAL is lower than --min_qval used for the calling
# don't use QUAL if the vcf was separated into different pieces (QVAL is not recalculated)
# all_calls = all_calls[which(apply(geno(all_calls, "QVAL"), 1, max) >= minQVAL), ]
### populate the table of all mutations with features and ethnicities ###
n_samples = length(samples(header(all_calls)))
kept_variants = which(as.vector(t(geno(all_calls)$QVAL)) >= minQVAL)
all_mut_table = data.frame(matrix(NA, nrow = length(kept_variants), ncol = length(features)))
colnames(all_mut_table) = features
rownames(all_mut_table) = paste(rep(rownames(all_calls), each=n_samples), rep(samples(header(all_calls)),n_samples), sep="\\")[kept_variants]
all_pop = c("EAS","AMR","FIN","OTH","SAS","NFE","AFR")
for(pop in all_pop){ # compute for each pop the relative proportion of the variants (0.5=50% of samples with that SNP were from this pop)
assign(paste("rp",pop,sep="_"), info(all_calls)[paste("ExAC",pop,sep="_")][,1] /
rowSums(data.frame(info(all_calls)$ExAC_AMR, info(all_calls)$ExAC_EAS, info(all_calls)$ExAC_FIN, info(all_calls)$ExAC_OTH, info(all_calls)$ExAC_SAS,
info(all_calls)$ExAC_NFE, info(all_calls)$ExAC_AFR), na.rm=T)
)
}
# compute the number of variant that are unique for the population
all_rp = unlist(lapply(all_pop, function(p) {
rp = rep(get(paste("rp", p, sep="_")), each=n_samples)[kept_variants]
length(which(rp>=0.99))
}))
ethn = all_pop[which.max(all_rp)]
sm_ethn = rep(get(paste("rp", ethn, sep="_")), each=n_samples)[kept_variants]
pdat = data.frame(get(paste("rp", all_pop[which(all_pop != ethn)][1], sep="_")))
for(p in all_pop[which(all_pop != ethn)][2:length(all_pop[which(all_pop != ethn)])]){
pdat = cbind(pdat, get(paste("rp", p, sep="_")))
}
other_ethn = rep(apply(pdat, 1, function(r){if(sum(!is.na(r))==0) {NA} else {max(r, na.rm=T)}}), # compute max relative proportion of all other ethnicities
each=n_samples)[kept_variants]
exac_all = rep(info(all_calls)$ExAC_ALL, each=n_samples)[kept_variants]
# assign features
for (f in features){
if( f %in% names(geno(all_calls))){ # start with genotype because a variable can have same name in both geno and info (prioritize geno)
all_mut_table[,f] = as.vector(t(geno(all_calls)[[f]]))[kept_variants] # do this in each if, in order to do not keep na values for features not found
} else { # only do this if not found in geno, otherwise vector will be replace by the info one
if(f %in% colnames(info(all_calls))){
all_mut_table[,f] = rep(info(all_calls)[,f], each = n_samples)[kept_variants] # to get same structure than as.vector(t(geno))
} else {
all_mut_table[,f] = rep(as.data.frame(rowRanges(all_calls)[,f])[,f], each = n_samples)[kept_variants]
}
}
}
if( ! ethnicity ){
print("INFO: using recurrence of mutation to build the sets of TP/FP")
normal_calls = all_calls[,which(grepl("BN-", colnames(all_calls)))]
nbq = apply(geno(normal_calls)[["QVAL"]], 1, function(r) length(which(r>=minQVAL)))
all_nbq = rep(nbq, each = n_samples)[kept_variants]
# assign status
all_mut_table$status = NA # status as NA is for variants not used in the training
all_mut_table[which(all_nbq>=3),"status"] = "TP" # if found in at least 2 normal cells
all_mut_table[which(all_nbq==1 & (exac_all == 0 | is.na(exac_all))),"status"] = "FP" # if found in only 1 normal cell
}
if( ethnicity ){
print("INFO: using ethnicity of the sample to build the sets of TP/FP")
# assign status
all_mut_table$status = NA # status as NA is for variants not used in the training
all_mut_table[which(sm_ethn>=0.99),"status"] = "TP" # here add & exac_all>=0.001 if want to filter rare variants
all_mut_table[which(other_ethn >=0.99),"status"] = "FP" # here too
}
# correct rvsb feature
if("RVSB" %in% features) all_mut_table[which(all_mut_table$RVSB <0.5),"RVSB"]=0.5
# return the table used for training
train_table_chunk = all_mut_table[which(!is.na(all_mut_table$status)),]
if(! exists("train_table")) {train_table=train_table_chunk} else {train_table = rbind(train_table, train_table_chunk)}
all_calls = readVcf(vcf, genome)
}
vcf
setwd("/g/strcombio/fsupek_cancer1/single_cell/automation_nextflow/needlestack-ITC/bin")
print("new chunk")
n_samples = length(samples(header(all_calls)))
kept_variants = which(as.vector(t(geno(all_calls)$QVAL)) >= minQVAL)
all_mut_table = data.frame(matrix(NA, nrow = length(kept_variants), ncol = length(features)))
colnames(all_mut_table) = features
rownames(all_mut_table) = paste(rep(rownames(all_calls), each=n_samples), rep(samples(header(all_calls)),n_samples), sep="\\")[kept_variants]
all_pop = c("EAS","AMR","FIN","OTH","SAS","NFE","AFR")
for(pop in all_pop){ # compute for each pop the relative proportion of the variants (0.5=50% of samples with that SNP were from this pop)
assign(paste("rp",pop,sep="_"), info(all_calls)[paste("ExAC",pop,sep="_")][,1] /
rowSums(data.frame(info(all_calls)$ExAC_AMR, info(all_calls)$ExAC_EAS, info(all_calls)$ExAC_FIN, info(all_calls)$ExAC_OTH, info(all_calls)$ExAC_SAS,
info(all_calls)$ExAC_NFE, info(all_calls)$ExAC_AFR), na.rm=T)
)
}
info(all_calls)[paste("ExAC",pop,sep="_")][1,1]
info(all_calls)
head(all_calls)
geno(all_calls)
info(all_calls)
library(VariantAnnotation)
info(all_calls)
info(class(all_calls))
class(all_calls)
class(all_calls[[1]])
class(all_calls[[2]])
genome
info(all_calls[1])
info(all_calls[[1]])
